isEverywhere:


 
public boolean isEverywhere(int[] nums, int val) {
    boolean flag1 = true;
    boolean flag2 = true;
 
    for (int i = 0; i < nums.length; i += 2)
        if (nums[i] != val) flag1 = false;
 
    for (int i = 0; i < nums.length - 1; i += 2)
        if (nums[i + 1] != val) flag2 = false;
 
    return flag1 || flag2;
}
 

either24:

public boolean either24(int[] nums) {
    Boolean twos = false;
    Boolean fours = false;
 
    for (int i = 0; i < nums.length - 1; i++) {
        if (nums[i] == 2 && nums[i + 1] == 2) twos = true;
        if (nums[i] == 4 && nums[i + 1] == 4) fours = true;
    }
    return twos ^ fours;
}

matchUp:


public int matchUp(int[] nums1, int[] nums2) {
    int count = 0;
    for (int i = 0; i < nums1.length; i++)
        if (nums1[i] != nums2[i]
            && Math.abs(nums1[i] - nums2[i]) <= 2)
                count++;
    return count;
}
 

has77:

 
public boolean has77(int[] nums) {
    for (int i = 0; i < nums.length - 1; i++)
        if (nums[i] == 7 && nums[i + 1] == 7) return true;
 
    for (int i = 0; i < nums.length - 2; i++)
        if (nums[i] == 7 && nums[i + 2] == 7) return true;
 
    return false;
}
 

has12:


public boolean has12(int[] nums) {
    int one = 0;
    int two = 0;
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] == 1) one = i;
        if (nums[i] == 2) two = i;
    }
    return two > one;
}
 

 
public boolean modThree(int[] nums) {
    for (int i = 0; i <= nums.length - 3; i++) {
        boolean cond1 = nums[i] % 2 == 0 && nums[i + 1] % 2 == 0
                && nums[i + 2] % 2 == 0;
        boolean cond2 = nums[i] % 2 == 1 && nums[i + 1] % 2 == 1
                && nums[i + 2] % 2 == 1;
        if (cond1 || cond2) return true;
    }
    return false;
}
 

haveThree:

 
public boolean haveThree(int[] nums) {
    int count = 0;
    int pos = -2; // in case nums[0] == 3
 
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] == 3) {
            count++;
            if (i - pos == 1) return false;
            pos = i;
        }
    }
 
    return count == 3;
}
 

twoTwo:


public boolean twoTwo(int[] nums) {
    for (int i = 0; i < nums.length; i++)
        if (nums[i] == 2) {
            int count = 0;
            for (int j = i; j < nums.length; j++)
                if (nums[j] == 2) count++;
                else break;
            i += count;
            if (count < 2) return false;
        }
    return true;
}
 

sameEnds:


public boolean sameEnds(int[] nums, int len) {
    for (int i = 0, j = nums.length - len; i < len; i++, j++)
        if (nums[i] != nums[j]) return false;
    return true;
}
 